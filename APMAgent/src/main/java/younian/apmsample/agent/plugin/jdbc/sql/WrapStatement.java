package younian.apmsample.agent.plugin.jdbc.sql;

import java.sql.*;
import younian.apmsample.agent.plugin.jdbc.sql.ConnectionTracing.Executable;

public class WrapStatement implements Statement {

	private Connection realConnection;
	private Statement realStatement;

	public WrapStatement(Connection realConnection, Statement realStatement) {
		super();
		this.realConnection = realConnection;
		this.realStatement = realStatement;
	}

	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		return realStatement.unwrap(iface);
	}

	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return realStatement.isWrapperFor(iface);
	}

	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		return ConnectionTracing.execute(realConnection, "executeQuery", sql,
				new Executable<ResultSet>() {

					@Override
					public ResultSet exec(Connection realConnection, String sql) throws SQLException {
						return realStatement.executeQuery(sql);
					}
				});
	}

	@Override
	public int executeUpdate(String sql) throws SQLException {
		return ConnectionTracing.execute(realConnection, "executeUpdate", sql,
				new Executable<Integer>() {

					@Override
					public Integer exec(Connection realConnection, String sql) throws SQLException {
						return realStatement.executeUpdate(sql);
					}
				});
	}

	@Override
	public boolean execute(String sql) throws SQLException {
		return ConnectionTracing.execute(realConnection, "execute", sql, new Executable<Boolean>() {

			@Override
			public Boolean exec(Connection realConnection, String sql) throws SQLException {
				return realStatement.execute(sql);
			}
		});
	}

	@Override
	public int[] executeBatch() throws SQLException {
		return ConnectionTracing.execute(realConnection, "executeBatch", "", new Executable<int[]>() {

			@Override
			public int[] exec(Connection realConnection, String sql) throws SQLException {
				return realStatement.executeBatch();
			}
		});
	}

	@Override
	public int executeUpdate(String sql, final int autoGeneratedKeys) throws SQLException {
		return ConnectionTracing.execute(realConnection, "executeUpdate", sql,
				new Executable<Integer>() {

					@Override
					public Integer exec(Connection realConnection, String sql) throws SQLException {
						return realStatement.executeUpdate(sql, autoGeneratedKeys);
					}
				});
	}

	@Override
	public int executeUpdate(String sql, final int[] columnIndexes) throws SQLException {
		return ConnectionTracing.execute(realConnection, "executeUpdate", sql,
				new Executable<Integer>() {

					@Override
					public Integer exec(Connection realConnection, String sql) throws SQLException {
						return realStatement.executeUpdate(sql, columnIndexes);
					}
				});
	}

	@Override
	public int executeUpdate(String sql, final String[] columnNames) throws SQLException {
		return ConnectionTracing.execute(realConnection, "executeUpdate", sql,
				new Executable<Integer>() {

					@Override
					public Integer exec(Connection realConnection, String sql) throws SQLException {
						return realStatement.executeUpdate(sql, columnNames);
					}
				});
	}

	@Override
	public boolean execute(String sql, final int autoGeneratedKeys) throws SQLException {
		return ConnectionTracing.execute(realConnection, "execute", sql, new Executable<Boolean>() {

			@Override
			public Boolean exec(Connection realConnection, String sql) throws SQLException {
				return realStatement.execute(sql, autoGeneratedKeys);
			}
		});
	}

	@Override
	public boolean execute(String sql, final int[] columnIndexes) throws SQLException {
		return ConnectionTracing.execute(realConnection, "execute", sql, new Executable<Boolean>() {

			@Override
			public Boolean exec(Connection realConnection, String sql) throws SQLException {
				return realStatement.execute(sql, columnIndexes);
			}
		});
	}

	@Override
	public boolean execute(String sql, final String[] columnNames) throws SQLException {
		return ConnectionTracing.execute(realConnection, "execute", sql, new Executable<Boolean>() {

			@Override
			public Boolean exec(Connection realConnection, String sql) throws SQLException {
				return realStatement.execute(sql, columnNames);
			}
		});
	}

	@Override
	public int getResultSetHoldability() throws SQLException {
		return realStatement.getResultSetHoldability();
	}

	@Override
	public void close() throws SQLException {
		realStatement.close();
	}

	@Override
	public int getMaxFieldSize() throws SQLException {
		return realStatement.getMaxFieldSize();
	}

	@Override
	public void setMaxFieldSize(int max) throws SQLException {
		realStatement.setMaxFieldSize(max);
	}

	@Override
	public int getMaxRows() throws SQLException {
		return realStatement.getMaxRows();
	}

	@Override
	public void setMaxRows(int max) throws SQLException {
		realStatement.setMaxRows(max);
	}

	@Override
	public void setEscapeProcessing(boolean enable) throws SQLException {
		realStatement.setEscapeProcessing(enable);
	}

	@Override
	public int getQueryTimeout() throws SQLException {
		return realStatement.getQueryTimeout();
	}

	@Override
	public void setQueryTimeout(int seconds) throws SQLException {
		realStatement.setQueryTimeout(seconds);
	}

	@Override
	public void cancel() throws SQLException {
		realStatement.cancel();
	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		return realStatement.getWarnings();
	}

	@Override
	public void clearWarnings() throws SQLException {
		realStatement.clearWarnings();
	}

	@Override
	public void setCursorName(String name) throws SQLException {
		realStatement.setCursorName(name);
	}

	@Override
	public ResultSet getResultSet() throws SQLException {
		return realStatement.getResultSet();
	}

	@Override
	public int getUpdateCount() throws SQLException {
		return realStatement.getUpdateCount();
	}

	@Override
	public boolean getMoreResults() throws SQLException {
		return realStatement.getMoreResults();
	}

	@Override
	public void setFetchDirection(int direction) throws SQLException {
		realStatement.setFetchDirection(direction);
	}

	@Override
	public int getFetchDirection() throws SQLException {
		return realStatement.getFetchDirection();
	}

	@Override
	public void setFetchSize(int rows) throws SQLException {
		realStatement.setFetchSize(rows);
	}

	@Override
	public int getFetchSize() throws SQLException {
		return realStatement.getFetchSize();
	}

	@Override
	public int getResultSetConcurrency() throws SQLException {
		return realStatement.getResultSetConcurrency();
	}

	@Override
	public int getResultSetType() throws SQLException {
		return realStatement.getResultSetType();
	}

	@Override
	public void addBatch(String sql) throws SQLException {
		realStatement.addBatch(sql);
	}

	@Override
	public void clearBatch() throws SQLException {
		realStatement.clearBatch();
	}

	@Override
	public Connection getConnection() throws SQLException {
		return realConnection;
	}

	@Override
	public boolean getMoreResults(int current) throws SQLException {
		return realStatement.getMoreResults(current);
	}

	@Override
	public ResultSet getGeneratedKeys() throws SQLException {
		return realStatement.getGeneratedKeys();
	}

	@Override
	public boolean isClosed() throws SQLException {
		return realStatement.isClosed();
	}

	@Override
	public void setPoolable(boolean poolable) throws SQLException {
		realStatement.setPoolable(poolable);
	}

	@Override
	public boolean isPoolable() throws SQLException {
		return realStatement.isPoolable();
	}

	@Override
	public void closeOnCompletion() throws SQLException {
		realStatement.closeOnCompletion();
	}

	@Override
	public boolean isCloseOnCompletion() throws SQLException {
		return realStatement.isCloseOnCompletion();
	}

}
